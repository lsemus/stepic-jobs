/* Попробуйте решить задачу в общем случае. В первой строке вам дается число задач N.
В следующей строке идет описание задач, для каждой задачи вам дана ее продолжительность
 - Ti (где i - это номер задачи, от 0 до N−1 не включительно).
  На выход вам требуется вывести номера задач (задачи нумеруются с 0) в порядке, который
   минимизирует среднее время ожидания завершения задачи, как это было объяснено ранее.

Гарантируется, что 0<N≤10000  и 0<Ti≤10000 и все числа целые. */

#include <iostream>
#include <map>
#include <vector>
#include <algorithm>
using namespace std;

 //объявляем пару значений
typedef pair<int, int> pr;

int main()
{
    // создаём карту
    map<int, int> mp;

    // создае пустой вектор пар
    vector<pr> vec;
// вводим число задач N
    int n;
    cin >> n;

    //заполняем карту значениями
     for (int i = 0; i < n; i++) {
        int ti;
        cin >> ti;
        mp[i] = ti;
    }
    // копируем пары из карты в вектор
    copy(mp.begin(),
            mp.end(),
            back_inserter<vector<pr>>(vec));
 /*сортируем вектор по возрастанию по второму значению пары
 если второе значение равно, сортируем по первому значению*/
    sort(vec.begin(), vec.end(),
            [](const pr &l, const pr &r)
            {
                if (l.second != r.second) {
                    return l.second < r.second;
                }

                return l.first < r.first;
            });

    // распечатать порядок задач
    for (auto const &pr: vec) {
        cout <<  pr.first << " ";
    }
 cout << endl;
    return 0;
}
